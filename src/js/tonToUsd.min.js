(function tonToUsdConverter() {
    let cachedRate = null;
    let cachedRateTime = 0;
    const RATE_CACHE_DURATION = 60 * 1000;

    async function fetchTonUsdRate() {
        const now = Date.now();
        if (cachedRate && (now - cachedRateTime < RATE_CACHE_DURATION)) {
            return cachedRate;
        }
        try {
            const response = await fetch('https://api.coonlink.fun/v1/ton/rate');
            const data = await response.json();
            if (data?.success && data?.rate) {
                cachedRate = data.rate;
                cachedRateTime = now;
                return cachedRate;
            } else {
                console.warn('[tonToUsd] Failed to get valid rate from API');
                return null;
            }
        } catch (error) {
            console.error('[tonToUsd] Error loading TON rate:', error);
            return null;
        }
    }

    function formatCompactUSD(value) {
        if (!isFinite(value)) return '∞';
        if (value >= 1e15) return '∞';
        if (value >= 1e12) return `$${(value / 1e12).toFixed(2)}T`;
        if (value >= 1e9) return `$${(value / 1e9).toFixed(2)}B`;
        if (value >= 1e6) return `$${(value / 1e6).toFixed(2)}M`;
        if (value >= 1e3) return `$${(value / 1e3).toFixed(2)}K`;
        return `$${value.toFixed(2)}`;
    }

    async function convertAll() {
        const elements = document.querySelectorAll('[data-tonToUsdPrice]');
        const defaultRate = await fetchTonUsdRate();
        if (!defaultRate) {
            console.warn('[tonToUsd] No valid TON rate found');
        }

        elements.forEach(el => {
            const rawAmount = el.getAttribute('data-tonToUsdPrice');
            const rawRate = el.getAttribute('data-tonToUsdRate');
            const cleanAmount = parseFloat((rawAmount || '').replace(/[\s\u00A0\u2007\u202F\u0020,]/g, ''));
            const rate = rawRate ? parseFloat(rawRate.replace(/[\s\u00A0\u2007\u202F\u0020,]/g, '')) : defaultRate;

            if (!rate || isNaN(cleanAmount)) {
                console.warn(`[tonToUsd] Invalid data: rate=${rate}, amount=${cleanAmount}`);
                el.textContent = '$ 0';
                return;
            }

            const usdValue = cleanAmount * rate;
            el.textContent = formatCompactUSD(usdValue);
        });
    }

    function observeDOMChanges() {
        const observer = new MutationObserver((mutations) => {
            for (const mutation of mutations) {
                if (mutation.addedNodes.length > 0) {
                    convertAll();
                    break;
                }
            }
        });
        observer.observe(document.body, { childList: true, subtree: true });
        console.log('[tonToUsd] MutationObserver initialized');
    }

    // Allow manual update
    window.updateTonToUsdPrices = convertAll;

    // Optional: support custom event
    window.addEventListener('updateTonPrices', () => convertAll());

    // Init
    if (document.readyState === 'complete' || document.readyState === 'interactive') {
        convertAll();
        observeDOMChanges();
    } else {
        document.addEventListener('DOMContentLoaded', () => {
            convertAll();
            observeDOMChanges();
        });
    }
})();
