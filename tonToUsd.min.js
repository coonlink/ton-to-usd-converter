/*!
 * ton-to-usd-converter v1.0.0-beta
 * Lightweight TON to USD converter (vanilla JS)
 * https://github.com/coonlink/ton-to-usd-converter
 */

(function tonToUsdConverter() {
    let cachedRate = null;
    let cachedRateTime = 0;
    const API_URL = 'https://api.coonlink.fun/v1/ton/rate';
    const RATE_CACHE_DURATION = 60 * 1000;
    let staleRateWarned = false;

    function debounce(fn, delay) {
        let timeout;
        return () => {
            clearTimeout(timeout);
            timeout = setTimeout(fn, delay);
        };
    }

    const idleCallback = window.requestIdleCallback || function (cb) { setTimeout(cb, 1); };

    async function fetchTonUsdRate() {
        const now = Date.now();
        if (cachedRate && (now - cachedRateTime < RATE_CACHE_DURATION)) {
            if (!staleRateWarned && (now - cachedRateTime > 5 * 60 * 1000)) {
                console.warn('[tonToUsd] Rate is older than 5 minutes.');
                staleRateWarned = true;
            }
            return cachedRate;
        }
        try {
            const response = await fetch(API_URL);
            const data = await response.json();
            if (data?.success && data?.rate) {
                cachedRate = data.rate;
                cachedRateTime = now;
                staleRateWarned = false;
                return cachedRate;
            } else {
                console.warn('[tonToUsd] Failed to get valid rate from API:', data);
                return null;
            }
        } catch (error) {
            console.error('[tonToUsd] Error loading TON rate:', error);
            return null;
        }
    }

    function formatCompactUSD(value) {
        if (!isFinite(value) || value >= 1e15) return 'âˆž';
        return new Intl.NumberFormat('en-US', {
            style: 'currency',
            currency: 'USD',
            notation: 'compact',
            compactDisplay: 'short',
            maximumFractionDigits: 2,
        }).format(value);
    }

    async function convertAll() {
        const elements = [...document.querySelectorAll('[data-tonToUsdPrice]')];
        if (elements.length === 0) return;

        const defaultRate = await fetchTonUsdRate();
        if (!defaultRate) {
            console.warn('[tonToUsd] No valid TON rate found');
        }

        const memo = new Map();
        elements.forEach((el) => {
            idleCallback(() => {
                const rawAmount = el.getAttribute('data-tonToUsdPrice');
                const rawRate = el.getAttribute('data-tonToUsdRate');
                const cleanAmount = parseFloat(rawAmount?.replace(/\s|,|\u00A0|\u2007|\u202F|\u0020/g, '') || '');
                const rate = rawRate ? parseFloat(rawRate.replace(/\s|,|\u00A0|\u2007|\u202F|\u0020/g, '')) : defaultRate;

                if (!rate || isNaN(cleanAmount)) {
                    el.textContent = el.getAttribute('data-fallback') || '$ 0';
                    return;
                }

                const key = `${cleanAmount}-${rate}`;
                if (memo.has(key)) {
                    el.textContent = memo.get(key);
                } else {
                    const usdValue = cleanAmount * rate;
                    const formatted = formatCompactUSD(usdValue);
                    el.textContent = formatted;
                    memo.set(key, formatted);
                }
            });
        });
    }

    let observer;
    function observeDOMChanges() {
        observer = new MutationObserver(debounce(() => convertAll(), 200));
        observer.observe(document.body, { childList: true, subtree: true });
        console.log('[tonToUsd] MutationObserver initialized');
    }

    window.updateTonToUsdPrices = convertAll;
    window.getTonUsdRate = fetchTonUsdRate;
    window.stopTonToUsdObserver = () => observer?.disconnect();

    if (document.readyState === 'complete' || document.readyState === 'interactive') {
        convertAll();
        observeDOMChanges();
    } else {
        document.addEventListener('DOMContentLoaded', () => {
            convertAll();
            observeDOMChanges();
        });
    }
})();
